#!/bin/bash -f
# Create a ssh key if there is no key in the .ssh directory
# Set an option in a local file
# Get an option from an INI file
# iniget config-file section option
source /home/savitb/bin/functions
USER="$(whoami)"
KEY_NAME="$USER"key
KEY_NAME=`echo $KEY_NAME | sed 's/\.//g'`
SECGROUP_NAME=$USER
PRIVATE_KEY="\/home\/savitb\/$USER\/.ssh\/id_rsa" # Needed to populate in config2.py
AUTH_URL=$(echo ${OS_AUTH_URL} | sed 's/\//\\\//g') # Needed to populate in config2.py

# Directory where the scripts will reside
DEFAULT_DIR="vino_elascale"
read -p "Folder to store scripts: ($DEFAULT_DIR): " SCRIPTS_DIR 
SCRIPTS_DIR=$HOME/${SCRIPTS_DIR:-$DEFAULT_DIR}
echo $SCRIPTS_DIR

blue_desc_title "  Initializing all settings for ($USER)"

green_desc_title "1. Creating a keypair ($KEY_NAME) ..."
if [[ ! -f $HOME/.ssh/id_rsa.pub ]]; then
    command_desc "ssh-keygen -t rsa"
    echo -e "\n" | ssh-keygen -t rsa -N ""
else
    green_desc "An existing keypair was found, skipping create"
fi
AUTH_KEY=$(cat ~/.ssh/id_rsa.pub)

green_desc_title "2. Importing the key-pair ($KEY_NAME) to SAVI Testbed ..."
command_desc "nova keypair-add --pub_key $HOME/.ssh/id_rsa.pub $KEY_NAME"
UPLOADED_KEY=`nova keypair-list | grep $KEY_NAME`
if [[ ! -z "$UPLOADED_KEY" ]]; then
    # Same Key-pair name found? Check fingerprint of id_rsa.pub and the uploaded keypair
    ID_RSA_FINGERPRINT=`ssh-keygen -lf $HOME/.ssh/id_rsa.pub | awk '{print $2}'`
    KEYPAIR_FINGERPRINT=`nova keypair-list | grep $KEY_NAME | cut -d "|" -f 3 | sed 's/ //g'`
    
    if [ "$ID_RSA_FINGERPRINT" == "$KEYPAIR_FINGERPRINT" ]
    then 
        green_desc "Keypair already added, skipping upload"
    else 
        # Delete the uploaded keypair and re-upload this one
        nova keypair-delete $KEY_NAME
        sleep 1
        nova keypair-add --pub_key $HOME/.ssh/id_rsa.pub $KEY_NAME
    fi

fi

green_desc_title "3. Creating a security group ($SECGROUP_NAME) ..."
#SECGROUP=`nova secgroup-list | grep $SECGROUP_NAME`
SECGROUP=`nova secgroup-list | awk '{print $4}' | grep "^$SECGROUP_NAME$"`
if [[ ! -z "$SECGROUP" ]]; then
    green_desc "Security Group $SECGROUP_NAME already exists, skipping create"
else
    command_desc "nova secgroup-create $SECGROUP_NAME \"$SECGROUP_NAME secgroup\""
    nova secgroup-create $SECGROUP_NAME "$SECGROUP_NAME secgroup"
fi


green_desc_title "4. Adding rules to enable SSH, ICMP, OpenFlow, and VXLAN for both Docker and OVS. Adding ports needed for Elascale platform and IoT App to ($SECGROUP_NAME) ..."
SSH_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 22`
ICMP_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i icmp | grep 255`
OF_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 6633`
OVSDB_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 6632`
DOCKER_VXLAN_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i udp | grep 4789`
OVS_VXLAN_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i udp | grep 8479`

# Secgroups for Elascale
DOCKER_DAEMON_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 2376`
ELASTICSEARCH_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 9200`
KIBANA_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 5601`
ELASCALE_UI_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 8888`
HTTPS_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 443`

# Secgroups for IoT App
REST_API_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 6969`
MYSQL_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 3306`

command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 22 22 0.0.0.0/0"
if [[ -z "$SSH_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 22 22 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME ICMP -1 255 0.0.0.0/0"
if [[ -z "$ICMP_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME ICMP -1 255 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 6632 6632 0.0.0.0/0"
if [[ -z "$OVSDB_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 6632 6632 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 6633 6633 0.0.0.0/0"
if [[ -z "$OF_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 6633 6633 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME UDP 4789 4789 0.0.0.0/0"
if [[ -z "$DOCKER_VXLAN_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME UDP 4789 4789 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME UDP 8479 8479 0.0.0.0/0"
if [[ -z "$OVS_VXLAN_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME UDP 8479 8479 0.0.0.0/0
fi

# Adding secgroup rules for Elascale 
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 2376 2377 0.0.0.0/0"
if [[ -z "$DOCKER_DAEMON_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 2376 2377 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 9200 9200 0.0.0.0/0"
if [[ -z "$ELASTICSEARCH_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 9200 9200 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 5601 5601 0.0.0.0/0"
if [[ -z "$KIBANA_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 5601 5601 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 8888 8888 0.0.0.0/0"
if [[ -z "$ELASCALE_UI_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 8888 8888 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 443 443 0.0.0.0/0"
if [[ -z "$HTTPS_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 443 443 0.0.0.0/0
fi

# Adding secgroup rules for IoT APP 
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 6969 6969 0.0.0.0/0"
if [[ -z "$REST_API_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 6969 6969 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 3306 3306 0.0.0.0/0"
if [[ -z "$MYSQL_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 3306 3306 0.0.0.0/0
fi

green_desc_title "5. Creating ViNO files related to this lab ..."
git clone https://github.com/RajsimmanRavi/vino_elascale.git $SCRIPTS_DIR

# Ensure vino scripts are executable
chmod 755 $SCRIPTS_DIR/vino
chmod 755 $SCRIPTS_DIR/vino_cleanup
chmod 755 $SCRIPTS_DIR/elascale_setup.py

# Don't allow others to read topology2.py and config2.py files
chmod o-r $SCRIPTS_DIR/topology2.py
chmod g-r $SCRIPTS_DIR/topology2.py
chmod o-r $SCRIPTS_DIR/config2.py
chmod g-r $SCRIPTS_DIR/config2.py

# Configure config file


sed -i "s/username=.*/username=\"${OS_USERNAME}\"/g" $SCRIPTS_DIR/config2.py
sed -i "s/password=.*/password=\"${OS_PASSWORD}\"/g" $SCRIPTS_DIR/config2.py
sed -i "s/auth_url=.*/auth_url=\"${AUTH_URL}\"/g" $SCRIPTS_DIR/config2.py
sed -i "s/instance_prefix=.*/instance_prefix=\"iot-${OS_USERNAME}-\"/g" $SCRIPTS_DIR/config2.py
sed -i "s/key_name=.*/key_name=\"${KEY_NAME}\"/g" $SCRIPTS_DIR/config2.py
sed -i "s/private_key_file=.*/private_key_file=\"${PRIVATE_KEY}\"/g" $SCRIPTS_DIR/config2.py 
sed -i "s/region_name=.*/region_name=\"${OS_REGION_NAME}\"/g" $SCRIPTS_DIR/config2.py
sed -i "s/tenant_name=.*/tenant_name=\"${OS_TENANT_NAME}\"/g" $SCRIPTS_DIR/config2.py
sed -i "s/sec_group_name=.*/sec_group_name=\"${SECGROUP_NAME}\"/g" $SCRIPTS_DIR/config2.py

# Configure topology file
sed -i "s/CORE/${OS_REGION_NAME}/g" $SCRIPTS_DIR/topology2.py

echo ""
blue_desc "Initialization completed."
